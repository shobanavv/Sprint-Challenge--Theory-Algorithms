Exercise 1 :
a. O(n)
b. O(log n)
c. O(1/2 * sqrt(n) * 8 * 8 * 1) = O(sqrt(n))
d. O(nlogn)
e. O(n^3) =0 (n * 1/2n * 1/4n * 9)
f. O(n)
g. O(n)

Exercise: II

a. 
res = 0;
temp = 0;
    a[n]; n numbers
    for(i = 0; i<n; i++) 
        for(j=0; j<n; j++)
         if(j>=i){
            res = a[j] - a[i]
            if(res > temp ) {
                temp = res;
            }
         }
         
    return temp;


b. Start at the middle floor and go down if it breaks. O(n) solution. Binary search.
f = constant value;
n = floors
e = eggs
for(i = 0; i<n; i++) 
    if (n<f){
        e++;
        add e-not broken;
    } 
    else (
        add count broken. Stop throwing

return e not broken eggs;



Exercise III:

a. you get one pivot for each time. So O(n^2)
b. median pivot it O(n^2)